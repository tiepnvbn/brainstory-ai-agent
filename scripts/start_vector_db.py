#!/usr/bin/env python3
"""
ChromaDB Vector Database Setup v√† Management Script
S·ª≠ d·ª•ng ƒë·ªÉ setup vector database cho vi·ªác l∆∞u tr·ªØ v√† t√¨m ki·∫øm d·ªØ li·ªáu t·ª´ GitHub v√† Rally
"""

import chromadb
import os
import sys
import json
from datetime import datetime
from pathlib import Path

# Th√™m th∆∞ m·ª•c g·ªëc v√†o Python path
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from core.data_connector import DataConnector


class VectorDBManager:
    def __init__(self, db_path="./chroma_db"):
        """
        Kh·ªüi t·∫°o ChromaDB Manager
        
        Args:
            db_path: ƒê∆∞·ªùng d·∫´n ƒë·∫øn th∆∞ m·ª•c l∆∞u tr·ªØ ChromaDB
        """
        self.db_path = db_path
        self.client = None
        self.collections = {}
        
    def initialize_db(self):
        """Kh·ªüi t·∫°o ChromaDB client v√† t·∫°o collections"""
        try:
            # T·∫°o th∆∞ m·ª•c n·∫øu ch∆∞a t·ªìn t·∫°i
            Path(self.db_path).mkdir(parents=True, exist_ok=True)
            
            # Kh·ªüi t·∫°o ChromaDB client
            self.client = chromadb.PersistentClient(path=self.db_path)
            print(f"‚úÖ ƒê√£ kh·ªüi t·∫°o ChromaDB t·∫°i: {self.db_path}")
            
            # T·∫°o collections cho c√°c lo·∫°i d·ªØ li·ªáu kh√°c nhau
            self._create_collections()
            
            return True
        except Exception as e:
            print(f"‚ùå L·ªói kh·ªüi t·∫°o ChromaDB: {e}")
            return False
    
    def _create_collections(self):
        """T·∫°o c√°c collections cho GitHub v√† Rally data"""
        collections_config = {
            "github_issues": {
                "name": "github_issues",
                "metadata": {"hnsw:space": "cosine"},
                "description": "GitHub Issues v√† Pull Requests"
            },
            "github_repos": {
                "name": "github_repos", 
                "metadata": {"hnsw:space": "cosine"},
                "description": "GitHub Repository information"
            },
            "rally_stories": {
                "name": "rally_stories",
                "metadata": {"hnsw:space": "cosine"}, 
                "description": "Rally User Stories"
            },
            "rally_features": {
                "name": "rally_features",
                "metadata": {"hnsw:space": "cosine"},
                "description": "Rally Features"
            },
            "rally_defects": {
                "name": "rally_defects",
                "metadata": {"hnsw:space": "cosine"},
                "description": "Rally Defects"
            }
        }
        
        for collection_key, config in collections_config.items():
            try:
                # Ki·ªÉm tra xem collection ƒë√£ t·ªìn t·∫°i ch∆∞a
                try:
                    collection = self.client.get_collection(config["name"])
                    print(f"üì¶ Collection '{config['name']}' ƒë√£ t·ªìn t·∫°i")
                except:
                    # T·∫°o collection m·ªõi n·∫øu ch∆∞a t·ªìn t·∫°i
                    collection = self.client.create_collection(
                        name=config["name"],
                        metadata=config["metadata"]
                    )
                    print(f"‚úÖ ƒê√£ t·∫°o collection '{config['name']}' - {config['description']}")
                
                self.collections[collection_key] = collection
                
            except Exception as e:
                print(f"‚ùå L·ªói t·∫°o collection '{config['name']}': {e}")
    
    def add_github_data(self, repo_owner, repo_name, force_refresh=False):
        """
        Th√™m d·ªØ li·ªáu GitHub v√†o vector database
        
        Args:
            repo_owner: T√™n owner c·ªßa repository
            repo_name: T√™n repository
            force_refresh: C√≥ force l√†m m·ªõi d·ªØ li·ªáu kh√¥ng
        """
        try:
            print(f"üîÑ ƒêang thu th·∫≠p d·ªØ li·ªáu GitHub t·ª´ {repo_owner}/{repo_name}...")
            
            # Kh·ªüi t·∫°o data connector
            connector = DataConnector()
            
            # L·∫•y th√¥ng tin repository
            repo_info = connector._get_repo_info(repo_owner, repo_name)
            if repo_info:
                self._add_repo_to_vector_db(repo_info, repo_owner, repo_name)
            
            # L·∫•y issues v√† PRs
            issues = connector._get_github_issues(repo_owner, repo_name)
            if issues:
                self._add_issues_to_vector_db(issues, repo_owner, repo_name)
                
            print(f"‚úÖ ƒê√£ th√™m d·ªØ li·ªáu GitHub {repo_owner}/{repo_name} v√†o vector database")
            
        except Exception as e:
            print(f"‚ùå L·ªói th√™m d·ªØ li·ªáu GitHub: {e}")
    
    def _add_repo_to_vector_db(self, repo_info, repo_owner, repo_name):
        """Th√™m th√¥ng tin repository v√†o vector database"""
        if "github_repos" not in self.collections:
            return
            
        collection = self.collections["github_repos"]
        
        # T·∫°o document text t·ª´ repo info
        doc_text = f"""
        Repository: {repo_owner}/{repo_name}
        Description: {repo_info.get('description', 'No description')}
        Language: {repo_info.get('language', 'Unknown')}
        Topics: {', '.join(repo_info.get('topics', []))}
        README: {repo_info.get('readme', 'No README')}
        """
        
        doc_id = f"repo_{repo_owner}_{repo_name}"
        
        # Th√™m v√†o collection
        collection.add(
            documents=[doc_text],
            ids=[doc_id],
            metadatas=[{
                "type": "repository",
                "owner": repo_owner,
                "name": repo_name,
                "language": repo_info.get('language', 'Unknown'),
                "created_at": repo_info.get('created_at', ''),
                "updated_at": datetime.now().isoformat()
            }]
        )
        
        print(f"üì¶ ƒê√£ th√™m repository {repo_owner}/{repo_name} v√†o vector DB")
    
    def _add_issues_to_vector_db(self, issues, repo_owner, repo_name):
        """Th√™m GitHub issues/PRs v√†o vector database"""
        if "github_issues" not in self.collections:
            return
            
        collection = self.collections["github_issues"]
        
        documents = []
        ids = []
        metadatas = []
        
        for issue in issues:
            # T·∫°o document text t·ª´ issue
            doc_text = f"""
            Title: {issue.get('title', '')}
            Body: {issue.get('body', '')}
            State: {issue.get('state', '')}
            Labels: {', '.join([label.get('name', '') for label in issue.get('labels', [])])}
            """
            
            doc_id = f"issue_{repo_owner}_{repo_name}_{issue.get('number', 0)}"
            
            documents.append(doc_text)
            ids.append(doc_id)
            metadatas.append({
                "type": "issue" if not issue.get('pull_request') else "pull_request",
                "repo_owner": repo_owner,
                "repo_name": repo_name,
                "number": issue.get('number', 0),
                "state": issue.get('state', ''),
                "created_at": issue.get('created_at', ''),
                "updated_at": datetime.now().isoformat()
            })
        
        if documents:
            # Th√™m batch v√†o collection
            collection.add(
                documents=documents,
                ids=ids,
                metadatas=metadatas
            )
            
            print(f"üìù ƒê√£ th√™m {len(documents)} issues/PRs t·ª´ {repo_owner}/{repo_name} v√†o vector DB")
    
    def add_rally_data(self, story_ids=None, force_refresh=False):
        """
        Th√™m d·ªØ li·ªáu Rally v√†o vector database
        
        Args:
            story_ids: List c√°c story IDs c·∫ßn th√™m (None ƒë·ªÉ l·∫•y t·∫•t c·∫£)
            force_refresh: C√≥ force l√†m m·ªõi d·ªØ li·ªáu kh√¥ng
        """
        try:
            print("üîÑ ƒêang thu th·∫≠p d·ªØ li·ªáu Rally...")
            
            # Kh·ªüi t·∫°o data connector
            connector = DataConnector()
            
            # L·∫•y Rally stories
            stories = connector._get_rally_stories(story_ids)
            if stories:
                self._add_rally_stories_to_vector_db(stories)
                
            print("‚úÖ ƒê√£ th√™m d·ªØ li·ªáu Rally v√†o vector database")
            
        except Exception as e:
            print(f"‚ùå L·ªói th√™m d·ªØ li·ªáu Rally: {e}")
    
    def _add_rally_stories_to_vector_db(self, stories):
        """Th√™m Rally stories v√†o vector database"""
        if "rally_stories" not in self.collections:
            return
            
        collection = self.collections["rally_stories"]
        
        documents = []
        ids = []
        metadatas = []
        
        for story in stories:
            # T·∫°o document text t·ª´ story
            doc_text = f"""
            Story ID: {story.get('FormattedID', '')}
            Name: {story.get('Name', '')}
            Description: {story.get('Description', '')}
            State: {story.get('ScheduleState', '')}
            Iteration: {story.get('Iteration', {}).get('Name', '') if story.get('Iteration') else ''}
            Owner: {story.get('Owner', {}).get('_refObjectName', '') if story.get('Owner') else ''}
            """
            
            doc_id = f"rally_story_{story.get('FormattedID', '')}"
            
            documents.append(doc_text)
            ids.append(doc_id)
            metadatas.append({
                "type": "user_story",
                "formatted_id": story.get('FormattedID', ''),
                "state": story.get('ScheduleState', ''),
                "created_date": story.get('CreationDate', ''),
                "updated_at": datetime.now().isoformat()
            })
        
        if documents:
            # Th√™m batch v√†o collection
            collection.add(
                documents=documents,
                ids=ids,
                metadatas=metadatas
            )
            
            print(f"üìã ƒê√£ th√™m {len(documents)} Rally stories v√†o vector DB")
    
    def search_similar(self, query, collection_name, limit=5):
        """
        T√¨m ki·∫øm d·ªØ li·ªáu t∆∞∆°ng t·ª± trong vector database
        
        Args:
            query: C√¢u query t√¨m ki·∫øm
            collection_name: T√™n collection ƒë·ªÉ t√¨m ki·∫øm
            limit: S·ªë l∆∞·ª£ng k·∫øt qu·∫£ t·ªëi ƒëa
            
        Returns:
            List k·∫øt qu·∫£ t√¨m ki·∫øm
        """
        try:
            if collection_name not in self.collections:
                print(f"‚ùå Collection '{collection_name}' kh√¥ng t·ªìn t·∫°i")
                return []
                
            collection = self.collections[collection_name]
            
            # Th·ª±c hi·ªán t√¨m ki·∫øm
            results = collection.query(
                query_texts=[query],
                n_results=limit
            )
            
            return results
            
        except Exception as e:
            print(f"‚ùå L·ªói t√¨m ki·∫øm: {e}")
            return []
    
    def get_database_stats(self):
        """L·∫•y th·ªëng k√™ database"""
        stats = {}
        
        for name, collection in self.collections.items():
            try:
                count = collection.count()
                stats[name] = count
            except:
                stats[name] = 0
                
        return stats
    
    def clear_collection(self, collection_name):
        """X√≥a to√†n b·ªô d·ªØ li·ªáu trong collection"""
        try:
            if collection_name in self.collections:
                # ChromaDB kh√¥ng c√≥ method clear, n√™n ta ph·∫£i delete v√† recreate
                self.client.delete_collection(collection_name)
                print(f"üóëÔ∏è ƒê√£ x√≥a collection '{collection_name}'")
                
                # T·∫°o l·∫°i collection
                self._create_collections()
                
        except Exception as e:
            print(f"‚ùå L·ªói x√≥a collection: {e}")


def main():
    """Main function ƒë·ªÉ ch·∫°y script"""
    print("üöÄ Kh·ªüi ƒë·ªông ChromaDB Vector Database Manager")
    print("=" * 50)
    
    # Kh·ªüi t·∫°o Vector DB Manager
    db_manager = VectorDBManager()
    
    # Initialize database
    if not db_manager.initialize_db():
        print("‚ùå Kh√¥ng th·ªÉ kh·ªüi t·∫°o database")
        return
    
    print("\nüìä Database Stats:")
    stats = db_manager.get_database_stats()
    for collection, count in stats.items():
        print(f"  - {collection}: {count} documents")
    
    print("\nüéØ Vector Database ƒë√£ s·∫µn s√†ng!")
    print("B·∫°n c√≥ th·ªÉ:")
    print("1. Th√™m d·ªØ li·ªáu GitHub: db_manager.add_github_data('owner', 'repo')")
    print("2. Th√™m d·ªØ li·ªáu Rally: db_manager.add_rally_data()")
    print("3. T√¨m ki·∫øm: db_manager.search_similar('query', 'collection_name')")
    
    return db_manager


if __name__ == "__main__":
    main()
